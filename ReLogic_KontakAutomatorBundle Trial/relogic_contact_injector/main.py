import os
import csv
from relogic_contact_injector.vcf_helper import parse_vcf, validate_contact

TRIAL_LIMIT = 20
TRIAL_WATERMARK = 'TRIAL VERSION - Generated by ReLogic'

def read_csv_contacts(csv_path):
    contacts = []
    with open(csv_path, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            contacts.append(row)
    return contacts

def read_vcf_contacts(vcf_path):
    return parse_vcf(vcf_path)

def remove_duplicate_contacts(contacts):
    seen = set()
    unique = []
    for c in contacts:
        phone = c.get('phone', '').strip()
        if phone and phone not in seen:
            seen.add(phone)
            unique.append(c)
    return unique

def inject_contacts(contacts):
    print('*** INI ADALAH VERSI TRIAL. Hanya 20 kontak pertama yang diproses. ***')
    contacts = contacts[:TRIAL_LIMIT]
    # Placeholder: implementasi inject ke device/layanan lain
    for c in contacts:
        if not validate_contact(c):
            log_error(c, 'Invalid contact')
            continue
        # ...proses inject...
    # Simpan watermark ke log
    log_path = os.path.join(os.path.dirname(__file__), '../example_output/injector_trial.log')
    with open(log_path, 'w', encoding='utf-8') as f:
        f.write(TRIAL_WATERMARK + '\n')
        f.write(f"Trial: hanya {TRIAL_LIMIT} kontak yang diproses.\n")
    print(f"Ready to inject {len(contacts)} valid contacts.")

def log_error(contact, reason):
    log_path = os.path.join(os.path.dirname(__file__), '../example_output/injector_errors.log')
    with open(log_path, 'a', encoding='utf-8') as f:
        f.write(TRIAL_WATERMARK + '\n')
        f.write(f"Contact: {contact}, Reason: {reason}\n")

def main():
    base_dir = os.path.dirname(__file__)
    csv_path = os.path.join(base_dir, '../example_output/contacts.csv')
    vcf_path = os.path.join(base_dir, '../example_output/sample.vcf')
    contacts = []
    if os.path.exists(csv_path):
        contacts.extend(read_csv_contacts(csv_path))
    if os.path.exists(vcf_path):
        contacts.extend(read_vcf_contacts(vcf_path))
    contacts = remove_duplicate_contacts(contacts)
    inject_contacts(contacts)

if __name__ == '__main__':
    main()
