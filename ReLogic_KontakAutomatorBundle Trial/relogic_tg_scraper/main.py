import os
import csv
from telethon.sync import TelegramClient
from telethon.errors import SessionPasswordNeededError
from telethon.tl.functions.contacts import GetContactsRequest
from relogic_tg_scraper.utils import log_failed_contact, write_vcf

TRIAL_LIMIT = 20
TRIAL_WATERMARK = 'TRIAL VERSION - Generated by ReLogic'

# API_ID dan API_HASH bisa dikosongkan agar user diminta input
API_ID = None
API_HASH = None
SESSION_NAME = 'relogic_tg_session'
OUTPUT_CSV = os.path.join(os.path.dirname(__file__), '../example_output/contacts.csv')
OUTPUT_VCF = os.path.join(os.path.dirname(__file__), '../example_output/sample.vcf')


def get_api_credentials():
    global API_ID, API_HASH
    if not API_ID:
        try:
            API_ID = int(input('Masukkan API_ID Telegram Anda: '))
        except Exception:
            print('API_ID harus berupa angka!')
            exit(1)
    if not API_HASH:
        API_HASH = input('Masukkan API_HASH Telegram Anda: ')        


def export_contacts():
    print('*** INI ADALAH VERSI TRIAL. Hanya 20 kontak pertama yang diekspor. ***')
    get_api_credentials()
    os.makedirs(os.path.dirname(OUTPUT_CSV), exist_ok=True)
    with TelegramClient(SESSION_NAME, API_ID, API_HASH) as client:
        client.start()
        contacts = client(GetContactsRequest(hash=0)).users
        contacts = contacts[:TRIAL_LIMIT]
        csv_rows = []
        vcf_entries = []
        for user in contacts:
            try:
                name = (user.first_name or '') + ' ' + (user.last_name or '')
                username = user.username or ''
                phone = user.phone or ''
                if not phone:
                    # skip or use placeholder
                    phone = ''
                    log_failed_contact(user.id, name, username, 'No phone number')
                    continue
                csv_rows.append({'name': name.strip(), 'username': username, 'phone': phone})
                vcf_entries.append({'name': name.strip(), 'phone': phone})
            except Exception as e:
                log_failed_contact(user.id, str(user), '', str(e))
        # Write CSV with watermark
        with open(OUTPUT_CSV, 'w', newline='', encoding='utf-8') as f:
            f.write(TRIAL_WATERMARK + '\n')
            writer = csv.DictWriter(f, fieldnames=['name', 'username', 'phone'])
            writer.writeheader()
            writer.writerows(csv_rows)
        # Write VCF with watermark
        write_vcf(vcf_entries, OUTPUT_VCF, trial_watermark=TRIAL_WATERMARK)
        print(f"Exported {len(csv_rows)} contacts to {OUTPUT_CSV} and {OUTPUT_VCF}")

if __name__ == '__main__':
    export_contacts()
